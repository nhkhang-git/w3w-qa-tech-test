const report = require("multiple-cucumber-html-reporter");
const fs = require("fs");
const path = require("path");

// Set up report directories
const reportsDir = "cypress/reports";
const htmlReportsDir = path.join(reportsDir, "html");

// Function to get all JSON files from cucumber-json directory
function getJsonReports() {
  const jsonDir = path.join(reportsDir, "cucumber-json");

  if (!fs.existsSync(jsonDir)) {
    console.log("⚠️ No cucumber-json directory found. No reports to generate.");
    return [];
  }

  return fs
    .readdirSync(jsonDir)
    .filter((file) => file.endsWith(".json"))
    .map((file) => path.join(jsonDir, file));
}

// Generate HTML report from JSON files
function generateHTMLReport() {
  const jsonFiles = getJsonReports();

  if (jsonFiles.length === 0) {
    console.log("⚠️ No JSON report files found. Skipping HTML report generation.");
    return;
  }

  report.generate({
    jsonDir: path.join(reportsDir, "cucumber-json"),
    reportPath: htmlReportsDir,
    displayDuration: true,
    durationInMS: true,
    displayReportTime: true,
    openReportInBrowser: false,
    saveCollectedJSON: true,
    reportName: "W3W Cypress Test Report",
    pageTitle: "W3W QA Tech Test Results",
    pageFooter: "<div><p>Generated by W3W QA Automation Framework</p></div>",
    customData: {
      title: "Test Execution Info",
      data: [
        { label: "Project", value: "W3W QA Tech Test" },
        { label: "Framework", value: "Cypress + Cucumber" },
        { label: "Environment", value: process.env.NODE_ENV || "test" },
        { label: "Execution Time", value: new Date().toLocaleString() },
        { label: "CI/CD", value: process.env.CIRCLECI ? "CircleCI" : "Local" },
      ],
    },
  });

  console.log("✅ HTML report generated successfully!");
}

// Function to create summary JSON for CircleCI
function generateSummaryJSON() {
  const jsonFiles = getJsonReports();

  if (jsonFiles.length === 0) {
    return;
  }

  let totalScenarios = 0;
  let passedScenarios = 0;
  let failedScenarios = 0;
  let totalFeatures = 0;
  const tagSummary = {};

  jsonFiles.forEach((jsonFile) => {
    try {
      const data = JSON.parse(fs.readFileSync(jsonFile, "utf8"));

      data.forEach((feature) => {
        totalFeatures++;

        feature.elements?.forEach((scenario) => {
          if (scenario.type === "scenario") {
            totalScenarios++;

            const isPassed = scenario.steps?.every(
              (step) => step.result?.status === "passed" || step.result?.status === "skipped"
            );

            if (isPassed) {
              passedScenarios++;
            } else {
              failedScenarios++;
            }

            // Count tags
            scenario.tags?.forEach((tag) => {
              const tagName = tag.name;
              if (!tagSummary[tagName]) {
                tagSummary[tagName] = { total: 0, passed: 0, failed: 0 };
              }
              tagSummary[tagName].total++;
              if (isPassed) {
                tagSummary[tagName].passed++;
              } else {
                tagSummary[tagName].failed++;
              }
            });
          }
        });
      });
    } catch (error) {
      console.error(`Error processing ${jsonFile}:`, error.message);
    }
  });

  const summary = {
    executionTime: new Date().toISOString(),
    environment: process.env.NODE_ENV || "test",
    cicd: process.env.CIRCLECI ? "CircleCI" : "Local",
    totalFeatures,
    totalScenarios,
    passedScenarios,
    failedScenarios,
    passRate: totalScenarios > 0 ? Math.round((passedScenarios / totalScenarios) * 100) : 0,
    tagSummary,
  };

  const summaryFile = path.join(reportsDir, "test-summary.json");
  fs.writeFileSync(summaryFile, JSON.stringify(summary, null, 2));
}

// Main execution
try {
  generateHTMLReport();
  generateSummaryJSON();
} catch (error) {
  console.error("❌ Report generation failed:", error.message);
  process.exit(1);
}
